<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>SSM on Reus09&#39;s Blog</title>
    <link>https://reus09.github.io/tags/ssm/</link>
    <description>Recent content in SSM on Reus09&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 29 Apr 2022 09:17:06 +0000</lastBuildDate><atom:link href="https://reus09.github.io/tags/ssm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mybatis</title>
      <link>https://reus09.github.io/posts/tech/mybatis/</link>
      <pubDate>Fri, 29 Apr 2022 09:17:06 +0000</pubDate>
      
      <guid>https://reus09.github.io/posts/tech/mybatis/</guid>
      <description>&lt;h1 id=&#34;mybatis&#34;&gt;MyBatis&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;这里整理了&lt;code&gt;MyBatis&lt;/code&gt;的常见用法&lt;/li&gt;
&lt;li&gt;Mybatis 主要对数据库的操作提供了组件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-环境搭建&#34;&gt;1 环境搭建&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;导入依赖&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    
    <item>
      <title>Spring Mvc</title>
      <link>https://reus09.github.io/posts/tech/spring-mvc/</link>
      <pubDate>Fri, 29 Apr 2022 09:16:59 +0000</pubDate>
      
      <guid>https://reus09.github.io/posts/tech/spring-mvc/</guid>
      <description>&lt;h1 id=&#34;spring-mvc&#34;&gt;Spring-mvc&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;本篇主要对&lt;code&gt;spring-mvc&lt;/code&gt;的知识点进行总结&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MVC的工作流程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户通过视图层发送请求到服务器，在服务器中请求被&lt;code&gt;Controller&lt;/code&gt;接收，&lt;code&gt;Controller&lt;/code&gt;调用相应的&lt;code&gt;Model&lt;/code&gt;层处理请求，处理完毕将结果返回到&lt;code&gt;Controller&lt;/code&gt;，&lt;code&gt;Controller&lt;/code&gt;再根据请求处理的结果找到相应的&lt;code&gt;View&lt;/code&gt;视图，渲染数据后最终响应给浏览器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SpringMVC&lt;/code&gt;工作流程&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spring</title>
      <link>https://reus09.github.io/posts/tech/spring/</link>
      <pubDate>Mon, 18 Apr 2022 20:36:10 +0000</pubDate>
      
      <guid>https://reus09.github.io/posts/tech/spring/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;这里主要学习了&lt;code&gt;Spring5&lt;/code&gt;的相关知识，对&lt;code&gt;ioc&lt;/code&gt;和&lt;code&gt;Aop&lt;/code&gt;的相关知识进行整理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;0x01-ioc&#34;&gt;0x01 IOC&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;概念
&lt;ul&gt;
&lt;li&gt;控制反转，把创建对象过程交给 Spring 进行管理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用目的：
&lt;ul&gt;
&lt;li&gt;为了耦合度降低&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;底层原理
&lt;ul&gt;
&lt;li&gt;xml 解析、工厂模式、反射&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IOC 思想基于 IOC 容器完成，IOC 容器底层就是对象工厂&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;11-实现方式&#34;&gt;1.1 实现方式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BeanFactory&lt;/code&gt;：&lt;code&gt;IOC &lt;/code&gt;容器基本实现，是 &lt;code&gt;Spring&lt;/code&gt; 内部的使用接口，不提供开发人员进行使用
&lt;ul&gt;
&lt;li&gt;加载配置文件时候不会创建对象，在获取对象（使用）才去创建对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ApplicationContext&lt;/code&gt;：&lt;code&gt;BeanFactory&lt;/code&gt; 接口的子接口，提供更多更强大的功能，一般由开发人 员进行使用
&lt;ul&gt;
&lt;li&gt;加载配置文件时候就会把在配置文件对象进行创建&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Bean&lt;/code&gt;管理
&lt;ul&gt;
&lt;li&gt;Spring创建对象&lt;/li&gt;
&lt;li&gt;Spring注入属性&lt;/li&gt;
&lt;li&gt;实现方法
&lt;ul&gt;
&lt;li&gt;基于&lt;code&gt;xml&lt;/code&gt;配置文件方式实现&lt;/li&gt;
&lt;li&gt;基于注解方式实现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;12-xml配置文件&#34;&gt;1.2 &lt;code&gt;xml&lt;/code&gt;配置文件&lt;/h3&gt;
&lt;h4 id=&#34;121-创建对象&#34;&gt;1.2.1 创建对象&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;在 spring 配置文件中，使用 bean 标签，标签里面添加对应属性，就可以实现对象创建&lt;/li&gt;
&lt;li&gt;在 bean 标签有很多属性，介绍常用的属性 *
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;id &lt;/code&gt;属性:唯一标识&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt; 属性:类全路径（包类路径)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;创建对象时候，默认也是执行无参数构造方法完成对象创建&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    
  </channel>
</rss>
