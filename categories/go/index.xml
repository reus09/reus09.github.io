<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Go on Reus09&#39;s Blog</title>
    <link>https://reus09.github.io/categories/go/</link>
    <description>Recent content in Go on Reus09&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 12 Sep 2022 16:18:58 +0800</lastBuildDate><atom:link href="https://reus09.github.io/categories/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Gin</title>
      <link>https://reus09.github.io/posts/tech/gin/</link>
      <pubDate>Mon, 12 Sep 2022 16:18:58 +0800</pubDate>
      
      <guid>https://reus09.github.io/posts/tech/gin/</guid>
      <description>对开源的开发框架gin进行了简单的学习，对常用的进行了简单的整理。 初始化 这里直接给出一个通用的模板 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 func main(){ // 使用默认中间件创建一个gin路由器 // logger and recovery (crash-free) 中间件 router := gin.Default() // 加载templates目录下的所有文件为html router.LoadHTMLGlob(&amp;#34;/templates/**&amp;#34;) router.GET(&amp;#34;/someGet&amp;#34;, getting) router.POST(&amp;#34;/somePost&amp;#34;, posting)</description>
    </item>
    
    <item>
      <title>Go原生net包分析</title>
      <link>https://reus09.github.io/posts/tech/go%E5%8E%9F%E7%94%9Fnet%E5%8C%85%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 11 Sep 2022 14:40:53 +0800</pubDate>
      
      <guid>https://reus09.github.io/posts/tech/go%E5%8E%9F%E7%94%9Fnet%E5%8C%85%E5%88%86%E6%9E%90/</guid>
      <description>很长时间没有水博客了，前些天学习了一下go的语法。go凭借其轻量级和并发性的原因，性能越来越优异，这里简单分析一下如何通过go原生的http开启一个web服务，并对其过程进行一定的剖析。 go原生的web服务搭建 Go 语言里面提供了一个完善的 net/http 包，通过 http 包可以很方便的就搭建起来一个可以</description>
    </item>
    
  </channel>
</rss>
