<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Java基础 on Reus09&#39;s Blog</title>
    <link>https://reus09.github.io/categories/java%E5%9F%BA%E7%A1%80/</link>
    <description>Recent content in Java基础 on Reus09&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 07 Apr 2023 18:51:30 +0800</lastBuildDate><atom:link href="https://reus09.github.io/categories/java%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java Agent学习</title>
      <link>https://reus09.github.io/posts/tech/java-agent%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Fri, 07 Apr 2023 18:51:30 +0800</pubDate>
      
      <guid>https://reus09.github.io/posts/tech/java-agent%E5%AD%A6%E4%B9%A0/</guid>
      <description>前言 JDK 1.5 开始，Java新增了 Instrumentation ( Java Agent API )和 JVMTI ( JVM Tool Interface )功能，允许JVM在加载某个 class 文件之前对其字节码进行修改，同时也支持对已加载的 class (类字节码)进行重新加载( Retransform )。 在1.6版本新增了attach(附加方式)，可以对运行中的Java进程插入Agent，instrumentation</description>
    </item>
    
    <item>
      <title>JAVA安全 RMI</title>
      <link>https://reus09.github.io/posts/tech/java%E5%AE%89%E5%85%A8-rmi/</link>
      <pubDate>Fri, 10 Mar 2023 19:17:17 +0800</pubDate>
      
      <guid>https://reus09.github.io/posts/tech/java%E5%AE%89%E5%85%A8-rmi/</guid>
      <description>实际上，懒狗(x本人)好久没学习了，但是倍感就业压力如此之大，此篇简单分析一下RMI的流程。 RMI介绍 RMI (Remote Method Invocation) 远程方法调用，他的出现是为了解决一个问题，如何在本地透明的调用远程服务器上的方法。 这种思想在 C 语言中的 RPC（Remote Procedure Calls）中早就有了体现，但是 RPC 是打包和传送</description>
    </item>
    
    <item>
      <title>Java之ClassLoader</title>
      <link>https://reus09.github.io/posts/tech/java%E4%B9%8Bclassloader/</link>
      <pubDate>Sat, 22 Oct 2022 18:44:22 +0800</pubDate>
      
      <guid>https://reus09.github.io/posts/tech/java%E4%B9%8Bclassloader/</guid>
      <description>这篇主要记录一下对于classloader的学习。 类加载机制 Java中的源码.java后缀文件会在运行前被编译成.class后缀文件，文件内的字节码的本质就是一个字节数组 ，它有特定的复杂的内部格式，Java类初始化的时候会调用java.lang.ClassLoader加载字节码，</description>
    </item>
    
    <item>
      <title>Java反射</title>
      <link>https://reus09.github.io/posts/tech/java%E5%8F%8D%E5%B0%84/</link>
      <pubDate>Fri, 21 Oct 2022 14:14:54 +0800</pubDate>
      
      <guid>https://reus09.github.io/posts/tech/java%E5%8F%8D%E5%B0%84/</guid>
      <description>前不久学习了动态代理的一些知识，然后跟着p神的代码审计知识星球进行初步学习，结合su18师傅的JavaSec项目，一些相关博客，对Java反射进行了学习。感觉p神的相关介绍更加的贴近原理、一些小trick。 反射是⼤多数语⾔⾥都必不可少的组成部分，对象可以通过反射获取他的类，类可以</description>
    </item>
    
    <item>
      <title>Java之动态代理</title>
      <link>https://reus09.github.io/posts/tech/java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</link>
      <pubDate>Mon, 17 Oct 2022 14:20:49 +0800</pubDate>
      
      <guid>https://reus09.github.io/posts/tech/java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</guid>
      <description>实际上在之前的学习阶段复现了一些CVE漏洞，但是发现还是存在基础方面的缺陷，对Java安全缺乏系统性的整理，因此从今天这篇开始，系统的整理学习一下Java安全的基础知识，今天先学习一下java里面的动态代理。 0x01 概念 代理模式是常用的 java 设计模式，他的特征是代理类与委托类有同样的接口，</description>
    </item>
    
  </channel>
</rss>
