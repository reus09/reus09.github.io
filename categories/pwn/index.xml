<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Pwn on Reus09&#39;s Blog</title>
    <link>https://reus09.github.io/categories/pwn/</link>
    <description>Recent content in Pwn on Reus09&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 14 Sep 2022 19:18:45 +0800</lastBuildDate><atom:link href="https://reus09.github.io/categories/pwn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pwn基础知识</title>
      <link>https://reus09.github.io/posts/tech/pwn%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Wed, 14 Sep 2022 19:18:45 +0800</pubDate>
      
      <guid>https://reus09.github.io/posts/tech/pwn%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>&lt;p&gt;大四了，最近一直在摆烂，因为之前学习过一点pwn的基础，最近也是再重新回顾一下，了解一下二进制安全。&lt;/p&gt;
&lt;h2 id=&#34;逆向基础&#34;&gt;逆向基础&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;amd64: 64位
AMD64，或“x64”，是一种64位元的电脑处理器架构。它是基于现有32位元的x86架构&lt;/li&gt;
&lt;li&gt;i386：—— intel 80386 32位， 通常作为intel32位微处理器（cpu）的统称。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为32位指令集具有普适，所以这里主要讲述x86-32版本的汇编语言。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rop</title>
      <link>https://reus09.github.io/posts/tech/rop/</link>
      <pubDate>Wed, 03 Nov 2021 22:11:40 +0000</pubDate>
      
      <guid>https://reus09.github.io/posts/tech/rop/</guid>
      <description>&lt;h1 id=&#34;pwn_rop-调试&#34;&gt;pwn_rop 调试&lt;/h1&gt;
&lt;h2 id=&#34;0x01-实验目的&#34;&gt;0x01 实验目的&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;1.针对实验一，通过gdb调试rop1，确定shellcode的地址；此外，通过rop1.py的调试脚本确定shellcode地址；最终拿到shell权限。相关详细分析过程写入报告，并比较两种方法的特点。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2.针对实验二的32位环境和64位环境，通过调试分析，完成实际rop2.py和rop3.py （预留有空白和错误之处），最终拿到shell权限。相关详细分析过程写入报告&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;0x02-实验环境&#34;&gt;0x02 实验环境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;ubuntu-20&#34;&gt;Ubuntu 20&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cnblog-img-reus09.oss-cn-beijing.aliyuncs.com/image/image-20211012222641174.png&#34; alt=&#34;image-20211012222641174&#34;  /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;gcc-版本&#34;&gt;gcc 版本&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://cnblog-img-reus09.oss-cn-beijing.aliyuncs.com/image/image-20211012222710806.png&#34; alt=&#34;image-20211012222710806&#34;  /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;工具&#34;&gt;工具&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h5 id=&#34;pwndbg&#34;&gt;pwndbg&lt;/h5&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h5 id=&#34;ropgadget&#34;&gt;ROPgadget&lt;/h5&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h5 id=&#34;pwntools&#34;&gt;pwntools&lt;/h5&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h5 id=&#34;visual-studio-code&#34;&gt;visual studio code&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;通过vs code 的ssh 远程连接服务器ubuntu，并且远程调试程序。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;0x03-实验前提知识&#34;&gt;0x03 实验前提知识&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ROP&lt;/strong&gt;的全称为 &lt;strong&gt;Return-oriented Programming&lt;/strong&gt;（返回导向编程&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>格式化字符串</title>
      <link>https://reus09.github.io/posts/tech/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Wed, 03 Nov 2021 20:46:59 +0000</pubDate>
      
      <guid>https://reus09.github.io/posts/tech/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>&lt;h1 id=&#34;格式化字符串漏洞&#34;&gt;格式化字符串漏洞&lt;/h1&gt;
&lt;h2 id=&#34;0x01-目的&#34;&gt;0x01 目的&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;通过格式化字符串掌握泄露内存数据和覆写内存。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;0x02-基础知识&#34;&gt;0x02 基础知识&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;格式化函数是一种特殊的ANSI C函数，它们从格式化字符串中提取参数，并对这些参数进行处理。而格式化字符串将C语言的主要数据类型，以易于阅读的方式保存在字符串里。从程序输出数据、打印错误信息到处理字符串数据，格式化字符串几乎出现在所有的C程序中。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
